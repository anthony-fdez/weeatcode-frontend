import type { NextPage, NextPageContext } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { useAppSelector } from "../../redux/hooks/hooks";
import styles from "./me.module.css";
import Axios from "axios";
import Skeleton from "react-loading-skeleton";

import { PostInterface } from "../../pages/index";
import { parseDate } from "../../functions/helpers/parseDate";
import PostCard from "../../components/posts/postCard/postCard";
import { Alert } from "react-bootstrap";

const Home: NextPage = () => {
  const user = useAppSelector((state) => state.user);

  const [isLoadingUserData, setIsLoadingUserData] = useState(true);

  const [posts, setPosts] = useState<PostInterface[] | null>(null);
  const [userData, setUserData] = useState<any | null>(null);

  useEffect(() => {
    setIsLoadingUserData(true);

    Axios.post(
      "http://localhost:3001/users/user_data",
      { userId: user.userId },
      {
        headers: {
          Authorization: user.jwtToken || "",
        },
      }
    )
      .then((response) => {
        console.log(response);
        setPosts(response.data.data.posts);
        setUserData(response.data.data.user);
      })
      .catch((e) => {
        console.log(e);
      });

    setTimeout(() => {
      setIsLoadingUserData(false);
    }, 3000);
  }, []);

  const loadingSkeleton = (): JSX.Element => {
    return (
      <>
        <main className={styles.container}>
          <Skeleton borderRadius={13} height={50} width={700} />
          <br></br>
          <Skeleton borderRadius={13} count={2} width={400} />
          <hr></hr>
          <Skeleton
            count={7}
            borderRadius={13}
            height={150}
            style={{ marginBottom: 10 }}
          />
        </main>
      </>
    );
  };

  const renderPosts = () => {
    if (!posts || posts.length === 0) {
      return (
        <>
          <Alert>You don&apos;t have any posts yet!</Alert>
        </>
      );
    }

    return (
      <>
        <p>Posts</p>
      </>
    );
  };

  if (isLoadingUserData) return loadingSkeleton();
  if (!userData) {
    return (
      <>
        <main className={styles.container}>
          <Alert variant="danger">
            <Alert.Heading>
              There was an error getting the information
            </Alert.Heading>
            <p>Please try again later.</p>
          </Alert>
        </main>
      </>
    );
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.container}>
        <h1>{user.name}</h1>
        <br></br>
        <p>{userData.email}</p>
        <p>Memger since: {parseDate({ date: userData.createdAt })}</p>
        <hr></hr>

        {renderPosts()}
      </main>

      <footer className={styles.footer}></footer>
    </div>
  );
};

export async function getStaticProps(context: NextPageContext) {
  return {
    props: {
      protected: true,
    },
  };
}

export default Home;
